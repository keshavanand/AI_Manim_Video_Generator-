scenes_list=[
  {
    "scene_name": "Introduction",
    "code": "from manim import *\n\nclass Introduction(Scene):\n    def construct(self):\n        text = Text(\"Visualizing Sorting Algorithms\", font_size=48)\n        self.play(Write(text))\n        self.wait(2)\n        self.play(FadeOut(text))"
  },
  {
    "scene_name": "ArrayInitialization",
    "code": "from manim import *\nimport random\n\nclass ArrayInitialization(Scene):\n    def construct(self):\n        # Array parameters\n        array_size = 10\n        array_values = [random.randint(1, 100) for _ in range(array_size)] #example values, prompt could specify constraints\n        rect_width = 0.7\n        rect_height = 0.5\n        spacing = 0.1\n\n        # Create rectangles and text\n        rects = VGroup(*[Rectangle(width=rect_width, height=rect_height) for _ in range(array_size)])\n        texts = VGroup(*[Text(str(val)) for val in array_values])\n\n        # Arrange rectangles and text\n        for i in range(array_size):\n            rects[i].move_to(i * (rect_width + spacing) * RIGHT)\n            texts[i].move_to(rects[i].get_center())\n\n        array_group = VGroup(rects, texts).move_to(ORIGIN)\n\n        self.play(Create(rects), Write(texts))\n        self.wait(1)\n\n        self.array_values = array_values # Store array values for later scenes\n        self.rects = rects #Store rects for later scenes\n        self.texts = texts #Store texts for later scenes\n        self.array_group = array_group #Store group for later scenes"
  },
  {
    "scene_name": "SelectionSort",
    "code": "from manim import *\n\nclass SelectionSort(Scene):\n    def construct(self):\n        # Access array elements from the previous scene (assuming it ran first)\n        # Ideally, these would be passed as arguments, but we'll retrieve from the Scene's attributes\n        if not hasattr(self, 'array_values'):\n            array_size = 10\n            array_values = [5, 2, 8, 1, 9, 4, 7, 3, 6, 10]\n            rect_width = 0.7\n            rect_height = 0.5\n            spacing = 0.1\n\n            rects = VGroup(*[Rectangle(width=rect_width, height=rect_height) for _ in range(array_size)])\n            texts = VGroup(*[Text(str(val)) for val in array_values])\n\n            for i in range(array_size):\n                rects[i].move_to(i * (rect_width + spacing) * RIGHT)\n                texts[i].move_to(rects[i].get_center())\n\n            array_group = VGroup(rects, texts).move_to(ORIGIN)\n\n            self.array_values = array_values\n            self.rects = rects\n            self.texts = texts\n            self.array_group = array_group\n\n        else:\n            array_values = self.array_values\n            rects = self.rects\n            texts = self.texts\n            array_group = self.array_group\n\n\n        self.add(array_group) # Ensure the array is visible\n        array_size = len(array_values)\n\n\n        for i in range(array_size):\n            min_index = i\n            for j in range(i + 1, array_size):\n                if array_values[j] < array_values[min_index]:\n                    min_index = j\n\n            # Highlight the minimum element\n            self.play(rects[min_index].set_fill(color=YELLOW, opacity=0.5))\n            self.wait(0.5)\n\n            # Swap elements\n            array_values[i], array_values[min_index] = array_values[min_index], array_values[i]\n\n            # Animate the swap\n            self.play(\n                rects[i].animate.move_to(rects[min_index].get_center()),\n                rects[min_index].animate.move_to(rects[i].get_center()),\n                texts[i].animate.move_to(rects[min_index].get_center()),\n                texts[min_index].animate.move_to(rects[i].get_center())\n            )\n            rects[i], rects[min_index] = rects[min_index], rects[i]\n            texts[i], texts[min_index] = texts[min_index], texts[i]\n\n\n            self.play(rects[min_index].set_fill(color=WHITE, opacity=0))\n            self.wait(0.5)\n\n        self.wait(2)\n"
  },
  {
    "scene_name": "FinalState",
    "code": "from manim import *\n\nclass FinalState(Scene):\n    def construct(self):\n        # Access array elements from the previous scene (assuming it ran first)\n        if not hasattr(self, 'array_values'):\n            array_size = 10\n            array_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n            rect_width = 0.7\n            rect_height = 0.5\n            spacing = 0.1\n\n            rects = VGroup(*[Rectangle(width=rect_width, height=rect_height) for _ in range(array_size)])\n            texts = VGroup(*[Text(str(val)) for val in array_values])\n\n            for i in range(array_size):\n                rects[i].move_to(i * (rect_width + spacing) * RIGHT)\n                texts[i].move_to(rects[i].get_center())\n\n            array_group = VGroup(rects, texts).move_to(ORIGIN)\n            self.array_values = array_values\n            self.rects = rects\n            self.texts = texts\n            self.array_group = array_group\n        else:\n            array_values = self.array_values\n            rects = self.rects\n            texts = self.texts\n            array_group = self.array_group\n\n\n        self.add(array_group)\n\n        # Highlight the sorted array\n        self.play(rects.set_fill(color=GREEN, opacity=0.5))\n        self.wait(2)\n"
  }
]
